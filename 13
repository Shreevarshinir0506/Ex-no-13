PROGRAM 1

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class IntersectionExample {

    public static <T extends Comparable<T>> List<T> intersect(List<T> list1, List<T> list2) {
        List<T> result = new ArrayList<>(list1);
        result.retainAll(list2);
        return result;
    }

    public static void main(String[] args) {
        List<Integer> list1 = new ArrayList<>();
        Collections.addAll(list1, 1, 4, 8, 9, 11, 15, 17, 28, 41, 59);

        List<Integer> list2 = new ArrayList<>();
        Collections.addAll(list2, 4, 7, 11, 17, 19, 20, 23, 28, 37, 59, 81);

        List<Integer> intersection = intersect(list1, list2);

        System.out.println("Intersection: " + intersection);
    }
}

PROGRAM 2

import java.util.*;

class Employee implements Comparable<Employee> {
    private String name;
    private double salary;

    public Employee(String name, double salary) {
        this.name = name;
        this.salary = salary;
    }

    public String getName() {
        return name;
    }

    public double getSalary() {
        return salary;
    }

    @Override
    public int compareTo(Employee other) {
        return this.name.compareTo(other.name);
    }

    @Override
    public String toString() {
        return "Employee{" +
                "name='" + name + '\'' +
                ", salary=" + salary +
                '}';
    }
}

public class EmployeeSortingExample {

    public static void main(String[] args) {
        List<Employee> employees = new ArrayList<>();
        employees.add(new Employee("John", 50000));
        employees.add(new Employee("Alice", 60000));
        employees.add(new Employee("Bob", 45000));
      
        System.out.println("Unsorted Employees:");
        printEmployees(employees);

   
        Collections.sort(employees, Comparator.comparing(Employee::getName));
        System.out.println("\nSorted Employees by Name (Ascending Order):");
        printEmployees(employees);
    }

    private static void printEmployees(List<Employee> employees) {
        for (Employee employee : employees) {
            System.out.println(employee);
        }
    }
}
